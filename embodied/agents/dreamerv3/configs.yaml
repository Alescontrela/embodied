defaults:

  # Trainer
  logdir: /dev/null
  seed: 0
  task: dummy_disc
  env: {amount: 4, parallel: process, repeat: 1, size: [64, 64], camera: -1, gray: False, length: 0, discretize: 0, lives: unused, actions: all, sticky: True, noops: 0, episodic: True, restart: True, checks: False, resets: True, reward_scale: 1.0, reward_offset: 0.0, break_speed: 100.0, gamma: 10.0, sticky_jump: 10, resize: opencv, seed: 0}
  replay: uniform
  replay_size: 1e6
  replay_online: False
  jax: {platform: gpu, jit: True, precision: float16, prealloc: True, debug_nans: False, parallel: False, logical_cpus: 0, debug: False}
  eval_dir: ''
  filter: '.*'
  run:
    script: train
    steps: 1e10
    expl_until: 0
    log_every: 300
    save_every: 900
    eval_every: 1e6
    eval_initial: True
    eval_eps: 1
    eval_samples: 1
    train_ratio: 32.0
    batch_steps: -1
    train_fill: 0
    eval_fill: 0
    pretrain: 1
    log_zeros: False
    log_keys_video: [image]
    log_keys_sum: '^$'
    log_keys_mean: '(log_entropy)'
    log_keys_max: '^$'
    sync_every: 120

  # Agent
  task_behavior: Greedy
  expl_behavior: None
  batch_size: 16
  batch_length: 64
  data_loaders: 8

  # World Model
  grad_heads: [decoder, reward, cont]
  rssm: {deter: 4096, units: 1024, stoch: 32, classes: 32, act: silu, norm: layer, initial: learned, unimix: 0.01, unroll: False, action_clip: 1.0, winit: normal, fan: avg}
  encoder: {mlp_keys: '.*', cnn_keys: '.*', act: silu, norm: layer, mlp_layers: 5, mlp_units: 1024, cnn: resnet, cnn_depth: 96, cnn_blocks: 0, resize: stride, winit: normal, fan: avg, symlog_inputs: True, minres: 4}
  decoder: {mlp_keys: '.*', cnn_keys: '.*', act: silu, norm: layer, mlp_layers: 5, mlp_units: 1024, cnn: resnet, cnn_depth: 96, cnn_blocks: 0, image_dist: mse, vector_dist: symlog_mse, inputs: [deter, stoch], resize: stride, winit: normal, fan: avg, outscale: 1.0, minres: 4, cnn_sigmoid: False}
  reward_head: {layers: 5, units: 1024, act: silu, norm: layer, dist: symlog_disc, outscale: 0.0, outnorm: False, inputs: [deter, stoch], winit: normal, fan: avg, bins: 255}
  cont_head: {layers: 5, units: 1024, act: silu, norm: layer, dist: binary, outscale: 1.0, outnorm: False, inputs: [deter, stoch], winit: normal, fan: avg}
  loss_scales: {image: 1.0, vector: 1.0, reward: 1.0, cont: 1.0, dyn: 0.5, rep: 0.1, actor: 1.0, critic: 1.0, slowreg: 1.0}
  dyn_loss: {impl: kl, free: 1.0}
  rep_loss: {impl: kl, free: 1.0}
  model_opt: {opt: adam, lr: 1e-4, eps: 1e-8, clip: 1000.0, wd: 0.0, warmup: 0, lateclip: 0.0}

  # Actor Critic
  actor: {layers: 5, units: 1024, act: silu, norm: layer, minstd: 0.1, maxstd: 1.0, outscale: 1.0, outnorm: False, unimix: 0.01, inputs: [deter, stoch], winit: normal, fan: avg, symlog_inputs: False}
  critic: {layers: 5, units: 1024, act: silu, norm: layer, dist: symlog_disc, outscale: 0.0, outnorm: False, inputs: [deter, stoch], winit: normal, fan: avg, bins: 255, symlog_inputs: False}
  actor_opt: {opt: adam, lr: 3e-5, eps: 1e-5, clip: 100.0, wd: 0.0, warmup: 0, lateclip: 0.0}
  critic_opt: {opt: adam, lr: 3e-5, eps: 1e-5, clip: 100.0, wd: 0.0, warmup: 0, lateclip: 0.0}
  actor_dist_disc: onehot
  actor_dist_cont: normal
  actor_grad_disc: reinforce
  actor_grad_cont: backprop
  critic_type: vfunction
  imag_horizon: 15
  imag_unroll: False
  horizon: 333
  return_lambda: 0.95
  critic_slowreg: logprob
  slow_critic_update: 1
  slow_critic_fraction: 0.02
  retnorm: {impl: perc_ema, decay: 0.99, max: 1.0, perclo: 5.0, perchi: 95.0}
  actent: 3e-4

  # Exploration
  expl_rewards: {extr: 0.0, disag: 0.0, vae: 0.0}
  expl_opt: {opt: adam, lr: 1e-4, eps: 1e-5, clip: 100.0, wd: 0.0, warmup: 0}
  disag_head: {layers: 5, units: 1024, act: silu, norm: layer, dist: mse, outscale: 1.0, inputs: [deter, stoch, action], winit: normal, fan: avg}
  disag_target: [stoch]
  disag_models: 8
  # ctrl_embed: {layers: 3, units: 1024, act: silu, norm: layer, dist: mse, inputs: [deter, stoch]}
  # ctrl_head: {layers: 1, units: 128, act: silu, norm: layer, dist: mse, inputs: [current, next]}
  # ctrl_size: 32
  # ctrl_opt: {opt: adam, lr: 1e-4, eps: 1e-5, clip: 100.0, wd: 0.0, warmup: 0, agc: 0.0}
  # pbe_inputs: [deter]
  # pbe_knn: 16
  # latvae_kl: {impl: mult, scale: 0.1, target: 10.0, min: 0.0, max: 1.0, vel: 0.1}
  latvae_enc: {layers: 5, units: 1024, act: silu, norm: layer, dist: onehot, outscale: 1.0, outnorm: False, inputs: [deter], shape: [8, 8], winit: normal, fan: avg}
  latvae_dec: {layers: 5, units: 1024, act: silu, norm: layer, dist: mse, outscale: 1.0, outnorm: False, winit: normal, fan: avg}
  latvae_kl: {scale: 0.5, free: 1.0}

minecraft:

  task: minecraft_wood
  env.amount: 16
  run:
    script: train_save
    eval_fill: 1e5
    train_ratio: 16
    log_keys_max: '^log_inventory.*'
  encoder: {mlp_keys: 'inventory|inventory_max|equipped|health|hunger|breath|reward', cnn_keys: 'image'}
  decoder: {mlp_keys: 'inventory|inventory_max|equipped|health|hunger|breath', cnn_keys: 'image'}
  # jax.precision: float32

dmlab:

  task: dmlab_rooms_collect_good_objects_train
  env: {repeat: 4, episodic: False, amount: 8}
  encoder: {mlp_keys: '$^', cnn_keys: 'image'}
  decoder: {mlp_keys: '$^', cnn_keys: 'image'}
  run.train_ratio: 64

atari:

  task: atari_pong
  env: {gray: True, repeat: 4, amount: 8}
  run:
    # script: train_eval
    steps: 5.5e7
    eval_eps: 10
    train_ratio: 64
  encoder: {mlp_keys: '$^', cnn_keys: 'image'}
  decoder: {mlp_keys: '$^', cnn_keys: 'image'}

atari100k:

  task: atari_pong
  env:
    gray: False
    repeat: 4
    sticky: False
    noops: 30
    amount: 1
    actions: needed
  run:
    script: train_eval
    steps: 1.5e5
    eval_every: 1e5
    eval_initial: False
    eval_eps: 100
    train_ratio: 1024
  jax.precision: float32
  rssm.deter: 512
  .*\.cnn_depth: 32
  .*\.layers: 2
  .*\.units$: 512
  actor_eval_sample: True
  encoder: {mlp_keys: '$^', cnn_keys: 'image'}
  decoder: {mlp_keys: '$^', cnn_keys: 'image'}

crafter:

  task: crafter_reward
  env.amount: 4  # 1 for benchmark
  run:
    log_keys_max: '^log_achievement_.*'
    log_keys_sum: '^log_reward$'
  run.train_ratio: 512
  encoder: {mlp_keys: '$^', cnn_keys: 'image'}
  decoder: {mlp_keys: '$^', cnn_keys: 'image'}

procgen:

  task: procgen_coinrun
  run.train_ratio: 32
  encoder: {mlp_keys: '$^', cnn_keys: 'image'}
  decoder: {mlp_keys: '$^', cnn_keys: 'image'}

dmc_vision:

  task: dmc_walker_walk
  env.repeat: 2
  run.train_ratio: 512
  rssm.deter: 512
  .*\.cnn_depth: 32
  .*\.layers: 2
  .*\.units: 512
  encoder: {mlp_keys: '$^', cnn_keys: 'image'}
  decoder: {mlp_keys: '$^', cnn_keys: 'image'}

dmc_proprio:

  task: dmc_walker_walk
  env.repeat: 2
  run.train_ratio: 512
  rssm.deter: 512
  .*\.cnn_depth: 32
  .*\.layers: 2
  .*\.units: 512
  encoder: {mlp_keys: '.*', cnn_keys: '$^'}
  decoder: {mlp_keys: '.*', cnn_keys: '$^'}

metaworld:

  task: metaworld_peg_insert_side
  env.amount: 2  # Note: Rendering requires process isolation.
  env.repeat: 2
  run:
    script: train_eval
    steps: 5e6
    eval_every: 3e4
    eval_eps: 4
    train_ratio: 128  # 512
  rssm.deter: 512
  .*\.cnn_depth: 32
  .*\.layers: 2
  .*\.units: 512
  encoder: {mlp_keys: '$^', cnn_keys: 'image'}
  decoder: {mlp_keys: '$^', cnn_keys: 'image'}

robodesk:

  task: robodesk_push_slide_dense
  env: {repeat: 4, length: 2000}
  run:
    script: train_eval
    eval_eps: 8
    train_ratio: 256
  encoder: {mlp_keys: '^$', cnn_keys: 'image'}
  decoder: {mlp_keys: '^$', cnn_keys: 'image'}

bsuite:

  task: bsuite_mnist/0
  env: {amount: 1, parallel: none}
  run:
    script: train
    train_ratio: 1024  # 128 for cartpole
  rssm.deter: 512
  .*\.cnn_depth: 32
  .*\.layers: 2
  .*\.units: 512

loconav_ant:

  task: loconav_ant_umaze
  env.repeat: 2
  run:
    train_ratio: 512
    log_keys_max: '^log_.*'
  encoder: {mlp_keys: '.*', cnn_keys: 'image'}
  decoder: {mlp_keys: '.*', cnn_keys: 'image'}

hrlgrid:

  task: hrlgrid_16
  encoder: {mlp_keys: '$^', cnn_keys: 'image'}
  decoder: {mlp_keys: '$^', cnn_keys: 'image'}

debug:

  jax: {jit: True, prealloc: False, debug: True, platform: cpu}
  env: {length: 100, restart: False, amount: 2, checks: True}
  run:
    eval_every: 1000
    log_every: 5
    save_every: 10
    train_ratio: 32
  batch_size: 8
  batch_length: 12
  replay_size: 500
  encoder.cnn_depth: 16
  decoder.cnn_depth: 16
  rssm: {deter: 64, units: 64, stoch: 8, classes: 8}
  .*unroll: False
  .*\.layers: 2
  .*\.units: 64
  .*\.wd$: 0.0
